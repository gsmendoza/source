- title = 'How I write acceptance tests'
- date = Date.new(2014, 6, 8)

= render '/blog/article_title', locals: { title: title, date: date }

:markdown
  *This article is a work in progress. I'm putting it out in public to motivate myself to complete it :)*

  [Napybara](https://github.com/gsmendoza/napybara) is a ruby gem I wrote for building Capybara helpers. In this article, I'll describe how I use it and [rspec-example_steps](https://github.com/railsware/rspec-example_steps) to write acceptance tests for Rails apps.

  ### Use rspec-example_steps to describe the spec from the user's perspective

  [rspec-example_steps](https://github.com/railsware/rspec-example_steps) is a gem for writing specs in Gherkin (aka Given-When-Then) format. It's an underrated alternative to Cucumber.

  Let's say we're building a to-do app. Our first feature is "Users should be able to add a new to-do item." With rspec-example_steps and [steak](https://github.com/cavalle/steak), I can write that spec as

      feature "To-do: " do
        Steps "Users should be able to add a new to-do item." do
          Given "I am in the home page"
          When "I click the New To-Do link"
          Then "I should see the New To-Do page"
          And "I should see a form for adding a new to-do item"
          When "I enter my to-do in the form"
          And "I submit the form"
          Then "I should see the To-Do List page"
          And "I should see the to-do item that I entered there"
        end
      end

  `Steps` is basically a synonym of RSpec's `it`. Thus the whole "Users should be able to add a new to-do item." block is basically an `it` block.

  If you're a Cucumber user, you'll notice that I'm not worrying too much about the specificity and reusability of the steps. Cucumber users tend to debate a lot about how specific steps should be. In my opinion, steps are not the best place for building acceptance spec helpers. This is because steps are too coupled to their own descriptions. Natural-reading step descriptions rely heavily on the context of the spec they are used in, making them difficult to make context-insensitive. For example, in the "I should see the to-do item that I entered there" line, "to-do item" refers to some to-do item I entered in a previous step, and "there" refers to the To-Do List page. Had I chose to make the step context-insensitive, I could have written the last two lines this way:

      Then "I should see the To-Do List page"
      And "I should see the to-do item that I entered in the To-Do List page"

  Context-insensitive steps become redundant quickly. If your goal for writing specs in Gherkin is to communicate specs with non-technical people, presenting specs full of redundant step descriptions defeats that goal.

  What about the specificity of the steps? Shouldn't the steps be as general as possible, avoiding mentions to UI details like links and forms? My take here is that it's difficult for a single developer much less a team of developers to determine the single, right layer for describing domain concepts. Rather than taking that path, I recommend making steps as fine as possible, depending on how complex the feature is. Complex features require fine and numerous steps, while simple features can utilize more general ones. With finer steps, you can implement complex features easier, since you have less to do to implement each step.

  The specificity of steps also depend on how integral the steps are to the spec you're implementing. If you're implementing a spec for editing an existing to-do item, you don't have to make the steps for creating that existing to-do item to be as fine as the steps for the "Users should be able to add a new to-do item." Since the existence of the to-do item is just an assumption in the spec, you can simply summarize that assumption in one step:

      Given "I have an existing to-do item"

  So to recap, our goal with each spec is to make the steps as natural-sounding as possible. We're not concerning ourselves with figuring out a "right" level of specificity for the steps in order to make them reusable. How then do we make reusable helpers for our acceptance tests?. This is where Napybara comes in.

  ### Describe each step

  I use Napybara to describe each step in an object-oriented manner. For example, let's take the second step:

      When "I click the New To-Do link"

  This is how I can describe this step with Napybara:

      When "I click the New To-Do link" do
        home_page.new_todo_link.node.click
      end

  Compare with describing the steps using Capybara's API:

      When "I click the New To-Do link" do
        click_link 'New To-do'
      end

  The Capybara approach describes the step in terms of procedures while the Napybara approach describes the steps in terms of pages and elements. The Capybara approach also uses a single call to find the element and interact with it, while the Napybara approach breaks these two actions into separate calls. In my opinion, these differences make working with acceptance tests easier with Napybara:

  1. Debugging. When an acceptance test fails, we usually want to know 1) if the element we're interacting with in the page is still there, and 2) if we're interacting with it correctly. Since Napybara allows us to make separate calls for these two actions, it's easier for us to isolate them during troubleshooting.

  2. Organizing and discovering helpers. Todo.


  Some argue that writing the steps in terms of procedures is more high-level and is thus closer to the user's way of thinking. This might be true, but we can already accomplish this advantage by writing the steps in Gherkin.

  ### Pattern: Napybara elements with values

  * If a Napybara element represents some object in the domain, add a `value` method to it. Let the method return the value represented by the element.

  ### Implement the feature step by step

  * Build the Napybara page along with the actual UI.

  ### Move Napybara page to its own module for reuse in other specs
